From: Jose Luis Rivero <jrivero@osrfoundation.org>
Date: Mon, 5 May 2014 18:45 +0200
Subject: Fix problem with libccd version 2
Bug: https://github.com/flexible-collision-library/fcl/issues/28 

diff --git a/include/fcl/ccd/simplex.h b/include/fcl/ccd/simplex.h
new file mode 100644
index 0000000..8ae09c7
--- /dev/null
+++ b/include/fcl/ccd/simplex.h
@@ -0,0 +1,104 @@
+/***
+ * libccd
+ * ---------------------------------
+ * Copyright (c)2010 Daniel Fiser <danfis@danfis.cz>
+ *
+ *
+ *  This file is part of libccd.
+ *
+ *  Distributed under the OSI-approved BSD License (the "License");
+ *  see accompanying file BDS-LICENSE for details or see
+ *  <http://www.opensource.org/licenses/bsd-license.php>.
+ *
+ *  This software is distributed WITHOUT ANY WARRANTY; without even the
+ *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ *  See the License for more information.
+ */
+
+#ifndef __CCD_SIMPLEX_H__
+#define __CCD_SIMPLEX_H__
+
+#include <ccd/compiler.h>
+#include "support.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+struct _ccd_simplex_t {
+    ccd_support_t ps[4];
+    int last; //!< index of last added point
+};
+typedef struct _ccd_simplex_t ccd_simplex_t;
+
+
+_ccd_inline void ccdSimplexInit(ccd_simplex_t *s);
+_ccd_inline int ccdSimplexSize(const ccd_simplex_t *s);
+_ccd_inline const ccd_support_t *ccdSimplexLast(const ccd_simplex_t *s);
+_ccd_inline const ccd_support_t *ccdSimplexPoint(const ccd_simplex_t *s, int idx);
+_ccd_inline ccd_support_t *ccdSimplexPointW(ccd_simplex_t *s, int idx);
+
+_ccd_inline void ccdSimplexAdd(ccd_simplex_t *s, const ccd_support_t *v);
+_ccd_inline void ccdSimplexSet(ccd_simplex_t *s, size_t pos, const ccd_support_t *a);
+_ccd_inline void ccdSimplexSetSize(ccd_simplex_t *s, int size);
+_ccd_inline void ccdSimplexSwap(ccd_simplex_t *s, size_t pos1, size_t pos2);
+
+
+/**** INLINES ****/
+
+_ccd_inline void ccdSimplexInit(ccd_simplex_t *s)
+{
+    s->last = -1;
+}
+
+_ccd_inline int ccdSimplexSize(const ccd_simplex_t *s)
+{
+    return s->last + 1;
+}
+
+_ccd_inline const ccd_support_t *ccdSimplexLast(const ccd_simplex_t *s)
+{
+    return ccdSimplexPoint(s, s->last);
+}
+
+_ccd_inline const ccd_support_t *ccdSimplexPoint(const ccd_simplex_t *s, int idx)
+{
+    // here is no check on boundaries
+    return &s->ps[idx];
+}
+_ccd_inline ccd_support_t *ccdSimplexPointW(ccd_simplex_t *s, int idx)
+{
+    return &s->ps[idx];
+}
+
+_ccd_inline void ccdSimplexAdd(ccd_simplex_t *s, const ccd_support_t *v)
+{
+    // here is no check on boundaries in sake of speed
+    ++s->last;
+    ccdSupportCopy(s->ps + s->last, v);
+}
+
+_ccd_inline void ccdSimplexSet(ccd_simplex_t *s, size_t pos, const ccd_support_t *a)
+{
+    ccdSupportCopy(s->ps + pos, a);
+}
+
+_ccd_inline void ccdSimplexSetSize(ccd_simplex_t *s, int size)
+{
+    s->last = size - 1;
+}
+
+_ccd_inline void ccdSimplexSwap(ccd_simplex_t *s, size_t pos1, size_t pos2)
+{
+    ccd_support_t supp;
+
+    ccdSupportCopy(&supp, &s->ps[pos1]);
+    ccdSupportCopy(&s->ps[pos1], &s->ps[pos2]);
+    ccdSupportCopy(&s->ps[pos2], &supp);
+}
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif /* __cplusplus */
+
+#endif /* __CCD_SIMPLEX_H__ */
diff --git a/include/fcl/ccd/support.h b/include/fcl/ccd/support.h
new file mode 100644
index 0000000..3372f5e
--- /dev/null
+++ b/include/fcl/ccd/support.h
@@ -0,0 +1,55 @@
+/***
+ * libccd
+ * ---------------------------------
+ * Copyright (c)2010 Daniel Fiser <danfis@danfis.cz>
+ *
+ *
+ *  This file is part of libccd.
+ *
+ *  Distributed under the OSI-approved BSD License (the "License");
+ *  see accompanying file BDS-LICENSE for details or see
+ *  <http://www.opensource.org/licenses/bsd-license.php>.
+ *
+ *  This software is distributed WITHOUT ANY WARRANTY; without even the
+ *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ *  See the License for more information.
+ */
+
+#ifndef __CCD_SUPPORT_H__
+#define __CCD_SUPPORT_H__
+
+#include <ccd/ccd.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+struct _ccd_support_t {
+    ccd_vec3_t v;  //!< Support point in minkowski sum
+    ccd_vec3_t v1; //!< Support point in obj1
+    ccd_vec3_t v2; //!< Support point in obj2
+};
+typedef struct _ccd_support_t ccd_support_t;
+
+_ccd_inline void ccdSupportCopy(ccd_support_t *, const ccd_support_t *s);
+
+/**
+ * Computes support point of obj1 and obj2 in direction dir.
+ * Support point is returned via supp.
+ */
+void __ccdSupport(const void *obj1, const void *obj2,
+                  const ccd_vec3_t *dir, const ccd_t *ccd,
+                  ccd_support_t *supp);
+
+
+/**** INLINES ****/
+_ccd_inline void ccdSupportCopy(ccd_support_t *d, const ccd_support_t *s)
+{
+    *d = *s;
+}
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif /* __cplusplus */
+
+#endif /* __CCD_SUPPORT_H__ */
diff --git a/src/narrowphase/gjk_libccd.cpp b/src/narrowphase/gjk_libccd.cpp
index d46689a..0d76b06 100644
--- a/src/narrowphase/gjk_libccd.cpp
+++ b/src/narrowphase/gjk_libccd.cpp
@@ -36,7 +36,7 @@
 
 
 #include "fcl/narrowphase/gjk_libccd.h"
-#include <ccd/simplex.h>
+#include "fcl/ccd/simplex.h"
 #include <ccd/vec3.h>
 #include <ccd/ccd.h>
 
